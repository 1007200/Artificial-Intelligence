import heapq

class PuzzleState:
    def __init__(self, board, parent, move, depth, cost):
        self.board = board
        self.parent = parent
        self.move = move
        self.depth = depth
        self.cost = cost

    def __lt__(self, other):
        return self.cost < other.cost

def print_board(board):
    print("+---+---+---+")
    for row in range(0, 9, 3):
        print("|" + "|".join(f" {tile if tile else ' '} " for tile in board[row:row+3]) + "|")
        print("+---+---+---+")

def heuristic(board):
    return sum(
        abs(i//3 - (tile-1)//3) + abs(i%3 - (tile-1)%3)
        for i, tile in enumerate(board) if tile
    )

def move_tile(board, move, blank_pos):
    new_board = board[:]
    new_blank_pos = blank_pos + {'U': -3, 'D': 3, 'L': -1, 'R': 1}[move]
    new_board[blank_pos], new_board[new_blank_pos] = new_board[new_blank_pos], new_board[blank_pos]
    return new_board

def a_star(start_state, goal_state=[1, 2, 3, 4, 5, 6, 7, 8, 0]):
    open_list = []
    closed_list = set()
    heapq.heappush(open_list, PuzzleState(start_state, None, None, 0, heuristic(start_state)))
    
    while open_list:
        current_state = heapq.heappop(open_list)
        if current_state.board == goal_state:
            return current_state
        closed_list.add(tuple(current_state.board))
        blank_pos = current_state.board.index(0)
        
        for move in 'UDLR':
            if (move == 'U' and blank_pos < 3) or (move == 'D' and blank_pos > 5) or \
               (move == 'L' and blank_pos % 3 == 0) or (move == 'R' and blank_pos % 3 == 2):
                continue
            new_board = move_tile(current_state.board, move, blank_pos)
            if tuple(new_board) in closed_list:
                continue
            heapq.heappush(open_list, PuzzleState(
                new_board, current_state, move,
                current_state.depth + 1,
                current_state.depth + 1 + heuristic(new_board)
            ))
    return None

def print_solution(solution):
    path = []
    while solution:
        path.append(solution)
        solution = solution.parent
    for step in reversed(path):
        print(f"Move: {step.move}")
        print_board(step.board)

initial_state = [1, 2, 3, 4, 0, 5, 6, 7, 8]
solution = a_star(initial_state)

if solution:
    print("Solution found:")
    print_solution(solution)
else:
    print("No solution exists.")
